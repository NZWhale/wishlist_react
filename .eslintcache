[{"/Users/vladimirputin/Desktop/projects/wishlist/src/index.tsx":"1","/Users/vladimirputin/Desktop/projects/wishlist/src/App.tsx":"2","/Users/vladimirputin/Desktop/projects/wishlist/src/components/AccountPage/index.tsx":"3","/Users/vladimirputin/Desktop/projects/wishlist/src/components/FriendsList/index.tsx":"4","/Users/vladimirputin/Desktop/projects/wishlist/src/components/AccountPage/AddFriendsBlock.tsx":"5","/Users/vladimirputin/Desktop/projects/wishlist/src/components/AccountPage/AccountSettingsBlock.tsx":"6","/Users/vladimirputin/Desktop/projects/wishlist/src/components/AccountPage/AddWishesBlock.tsx":"7","/Users/vladimirputin/Desktop/projects/wishlist/src/components/WishesBlock/index.tsx":"8","/Users/vladimirputin/Desktop/projects/wishlist/src/components/WishesBlock/SingleWish.tsx":"9","/Users/vladimirputin/Desktop/projects/wishlist/src/components/FriendsList/OneFriendWishes.tsx":"10","/Users/vladimirputin/Desktop/projects/wishlist/src/components/LoginPage/index.tsx":"11","/Users/vladimirputin/Desktop/projects/wishlist/src/components/Header.tsx":"12","/Users/vladimirputin/Desktop/projects/wishlist/src/store/store.ts":"13","/Users/vladimirputin/Desktop/projects/wishlist/src/store/reducers/reducer.ts":"14","/Users/vladimirputin/Desktop/projects/wishlist/src/store/initialState.ts":"15","/Users/vladimirputin/Desktop/projects/wishlist/src/store/actionCreators/setLoggedInUser.ts":"16","/Users/vladimirputin/Desktop/projects/wishlist/src/store/actionCreators/setLoggedStatus.ts":"17","/Users/vladimirputin/Desktop/projects/wishlist/src/store/actionCreators/setUsersAction.ts":"18","/Users/vladimirputin/Desktop/projects/wishlist/src/utils.ts":"19","/Users/vladimirputin/Desktop/projects/wishlist/src/components/WishesBlock/EmptyWishComponent.tsx":"20"},{"size":493,"mtime":1611064659428,"results":"21","hashOfConfig":"22"},{"size":2155,"mtime":1611212573614,"results":"23","hashOfConfig":"22"},{"size":1414,"mtime":1611055363053,"results":"24","hashOfConfig":"22"},{"size":926,"mtime":1611294701617,"results":"25","hashOfConfig":"22"},{"size":192,"mtime":1610537767316,"results":"26","hashOfConfig":"22"},{"size":1612,"mtime":1611160278420,"results":"27","hashOfConfig":"22"},{"size":5432,"mtime":1611301537856,"results":"28","hashOfConfig":"22"},{"size":659,"mtime":1611223247824,"results":"29","hashOfConfig":"22"},{"size":3044,"mtime":1611296094073,"results":"30","hashOfConfig":"22"},{"size":1492,"mtime":1611294593803,"results":"31","hashOfConfig":"22"},{"size":4538,"mtime":1611301712100,"results":"32","hashOfConfig":"22"},{"size":3074,"mtime":1611068776532,"results":"33","hashOfConfig":"22"},{"size":137,"mtime":1610800280849,"results":"34","hashOfConfig":"22"},{"size":557,"mtime":1611068659482,"results":"35","hashOfConfig":"22"},{"size":184,"mtime":1611206378331,"results":"36","hashOfConfig":"22"},{"size":281,"mtime":1610801020666,"results":"37","hashOfConfig":"22"},{"size":287,"mtime":1611068770336,"results":"38","hashOfConfig":"22"},{"size":251,"mtime":1610800949309,"results":"39","hashOfConfig":"22"},{"size":257,"mtime":1611301433378,"results":"40","hashOfConfig":"22"},{"size":568,"mtime":1611295125966,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"18cpbcg",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vladimirputin/Desktop/projects/wishlist/src/index.tsx",[],["89","90"],"/Users/vladimirputin/Desktop/projects/wishlist/src/App.tsx",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/components/AccountPage/index.tsx",["91"],"import * as React from 'react';\nimport { Accordion, Icon, Segment } from 'semantic-ui-react';\nimport Header from '../Header';\nimport AccountSettingsBlock from './AccountSettingsBlock';\nimport AddFriendsBlock from './AddFriendsBlock';\nimport AddWishesBlock from './AddWishesBlock';\n\nclass AccountPage extends React.Component {\n    state = { activeIndex: 0 }\n\n    handleClick = (e: any, titleProps: any) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        const { activeIndex } = this.state\n\n        return (\n            <>\n                <Header activeItem={\"Account\"}/>\n                <AddFriendsBlock />\n\n                <AccountSettingsBlock />\n                <Accordion fluid styled>\n                    <Accordion.Title\n                        active={activeIndex === 2}\n                        index={2}\n                        onClick={this.handleClick}\n                    >\n                        <Icon name='dropdown' />\n                    My Wishes\n                </Accordion.Title>\n                    <Accordion.Content active={activeIndex === 2}>\n                        <AddWishesBlock />\n                    </Accordion.Content>\n                </Accordion>\n\n            </>\n        )\n    }\n}\n\nexport default AccountPage","/Users/vladimirputin/Desktop/projects/wishlist/src/components/FriendsList/index.tsx",["92"],"/Users/vladimirputin/Desktop/projects/wishlist/src/components/AccountPage/AddFriendsBlock.tsx",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/components/AccountPage/AccountSettingsBlock.tsx",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/components/AccountPage/AddWishesBlock.tsx",["93"],"import { nanoid } from 'nanoid';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Form, Header, Image, Input, Modal, Segment, TextArea } from 'semantic-ui-react';\nimport { InputFile } from 'semantic-ui-react-input-file'\nimport noImage from '../../images/noImage.jpg';\nimport setUsersAction from '../../store/actionCreators/setUsersAction';\nimport store from '../../store/store';\nimport { StateInterface, User } from '../../types';\nimport { addWishUrl } from '../../utils';\nimport WishesBlock from '../WishesBlock';\nimport EmptyWishComponent from '../WishesBlock/EmptyWishComponent';\n\n\n\ninterface AddWishesBlockProps {\n    users: Array<User>\n    loggedInUser: string\n}\n\nclass AddWishesBlock extends React.Component<AddWishesBlockProps> {\n    handleUpload = console.log(\"1\")\n    user = [{ \"image\": \"undefined\", \"username\": \"test\", \"dayOfBirth\": \"01.01.1970\", \"wishes\": [{ \"img\":\"null\", \"title\": \"test\", \"url\": \"https://test.com\", \"comment\": \"test comment\" }, { \"img\":\"null\", \"title\": \"test2\", \"url\": \"https://test2.com\", \"comment\": \"second test comment\" }] }]\n\n    render() {\n        const { users, loggedInUser } = this.props\n        return (\n            <>\n                <NewWishModal loggedInUser={loggedInUser}/>\n                <Segment >\n                    {users[0]?<WishesBlock wishes={users[0].wishes} isLoggedInUser={true}/>:<EmptyWishComponent />}\n                </Segment>\n            </>\n        )\n    }\n}\n\nfunction NewWishModal(loggedInUser: any) {\n    const [open, setOpen] = React.useState(false)\n    const [image, setImage] = React.useState<string|null|ArrayBuffer>(null)\n    const [title, setTitle] = React.useState(\"\")\n    const [url, setUrl] = React.useState(\"\")\n    const [comment, setComment] = React.useState(\"\")\n\n    function encodeImageFileAsURL(element: any) {\n        var file = element.files[0];\n        var reader = new FileReader();\n        reader.onloadend = function() {\n          console.log('RESULT', reader.result)\n          setImage(reader.result)\n        }\n        reader.readAsDataURL(file);\n      }\n\nreturn (\n    <Modal\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n        open={open}\n        trigger={<Button basic color=\"teal\">Add New Wish</Button>}\n    >\n        <Modal.Header>Create Wish</Modal.Header>\n        <Modal.Content image>\n            <Segment>\n                <div style={{ marginLeft: '15%' }}>\n                    <Image size='medium' style={{ paddingRight: '10px', paddingBottom: '10px' }} src={image?image:noImage} wrapped />\n                    <InputFile\n\n                        button={undefined}\n                        input={{\n                            id: 'input-control-id',\n                            onChange: (e: any) => (encodeImageFileAsURL(e.target))\n                        }}\n                    />\n                </div>\n            </Segment>\n            <Modal.Description style={{ paddingLeft: '10px' }}>\n                <Form>\n                    <Form.Group widths='equal'>\n                        <Form.Field\n                            control={Input}\n                            label='Title'\n                            placeholder='Title'\n                            onChange={(e: any) => (setTitle(e.target.value))}\n                        />\n                        <Form.Field\n                            control={Input}\n                            label='Url'\n                            placeholder='Optional'\n                            onChange={(e: any) => (setUrl(e.target.value))}\n                        />\n                    </Form.Group>\n\n                    <Form.Field\n                        control={TextArea}\n                        label='Description'\n                        placeholder='Enter comment... Optional'\n                        onChange={(e: any) => (setComment(e.target.value))}\n                    />\n                </Form>\n            </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n            <Button basic negative onClick={() => {\n                setOpen(false)\n                setImage(null)\n                }}>\n                Cancel\n                </Button>\n            <Button\n                content=\"Add Wish\"\n                labelPosition='right'\n                icon='checkmark'\n                basic\n                onClick={() => {\n                    fetch(addWishUrl, {\n                        method: \"POST\",\n                        body: JSON.stringify({\n                            user: loggedInUser,\n                            wish: {\n                                id: nanoid(),\n                                image: image,\n                                title: title,\n                                url: url,\n                                comment: comment,\n                            }\n                        }),\n                        headers: {\"Content-Type\": \"application/json\"},\n                    }).then(response => response.json())\n                    .then(data => store.dispatch(setUsersAction(data)))\n                    setOpen(false)\n                    setImage(null)\n                }}\n                positive\n            />\n        </Modal.Actions>\n    </Modal>\n)\n}\n\nconst mapStateToProps = (state: StateInterface): AddWishesBlockProps => ({\n    users: state.users,\n    loggedInUser: state.loggedInUser\n})\n\nexport default connect(mapStateToProps)(AddWishesBlock)","/Users/vladimirputin/Desktop/projects/wishlist/src/components/WishesBlock/index.tsx",["94","95"],"import * as React from 'react';\nimport { Item } from 'semantic-ui-react';\nimport { Wish } from '../../types';\nimport Header from '../Header';\nimport SingleWish from './SingleWish';\n\ninterface WishesBlockProps {\n    wishes: Array<Wish> \n    isLoggedInUser: boolean\n}\n\nclass WishesBlock extends React.Component<WishesBlockProps> {\n    render() {\n        const { isLoggedInUser} = this.props\n        const wishesList = this.props.wishes.map((wish: Wish) =>\n            <SingleWish wish={wish} isLoggedInUser={isLoggedInUser}/>\n            )\n        return(\n            <>\n                {wishesList}\n            </>\n        )\n    }\n}\n\nexport default WishesBlock","/Users/vladimirputin/Desktop/projects/wishlist/src/components/WishesBlock/SingleWish.tsx",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/components/FriendsList/OneFriendWishes.tsx",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/components/LoginPage/index.tsx",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/components/Header.tsx",["96","97"],"import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps, withRouter } from 'react-router-dom';\nimport { Button, Input, Menu } from 'semantic-ui-react';\nimport setLoggedInUser from '../store/actionCreators/setLoggedInUser';\nimport setLoggedInStatus from '../store/actionCreators/setLoggedStatus';\nimport store from '../store/store';\nimport { StateInterface } from '../types';\n\ninterface HeaderProps extends HeaderPropsFromState{\n    activeItem: string;\n}\n\ninterface HeaderPropsFromState{\n    loggedInUser: string;\n}\n\n\nclass Header extends React.Component<HeaderProps & RouteComponentProps> {\n    state = { \n        activeItem: this.props.activeItem,\n    }\n\n    handleItemClick = (e: any, { name }: any) => this.setState({ activeItem: name })\n\n    render() {\n        const { activeItem } = this.state\n        const { match, history } = this.props\n                return (\n            <Menu pointing>\n                        <Menu.Item\n                            name='Friends'\n                            active={activeItem === 'Friends'}\n                            onClick={this.handleItemClick}\n                            as={Link}\n                            to=\"/friendslist\"\n                        />\n                        <Menu.Item\n                            name='Account'\n                            active={activeItem === 'Account'}\n                            onClick={this.handleItemClick}\n                            as={Link}\n                            to=\"/account\"\n                        />\n                        {activeItem === 'Friends' &&\n                            <Menu.Menu position='right'>\n                                <Menu.Item>\n                                    <Input icon='users' iconPosition='left' placeholder='Search users...' />\n                                    {/* TODO: create function to filter by friend's name */}\n                                </Menu.Item>\n                            </Menu.Menu>\n                        }\n                        {activeItem === 'Account' &&\n                            <Menu.Menu position='right'>\n                                <Menu.Item>\n                                    <Button basic \n                                    color='black'\n                                    onClick={() => {\n                                        console.log(this.props.loggedInUser)\n                                        store.dispatch(setLoggedInStatus(false))\n                                        history.push('/login')\n                                    }}\n                                    >Exit</Button>\n                                    {/* TODO: create function to exit from account */}\n                                </Menu.Item>\n                            </Menu.Menu>\n                        }\n                    </Menu>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state: StateInterface): HeaderPropsFromState => ({\n    loggedInUser: state.loggedInUser\n})\n\nexport default connect(mapStateToProps)(withRouter(Header))","/Users/vladimirputin/Desktop/projects/wishlist/src/store/store.ts",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/store/reducers/reducer.ts",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/store/initialState.ts",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/store/actionCreators/setLoggedInUser.ts",[],["98","99"],"/Users/vladimirputin/Desktop/projects/wishlist/src/store/actionCreators/setLoggedStatus.ts",["100"],"import Action, { User } from \"../../types\"\n\n\nconst setLoggedStatusAction: string = \"SET_LOGGED_STATUS\"\n\nconst setLoggedInStatus = (value: boolean | null): Action<any> => {\n    return { \n        type: setLoggedStatusAction,\n        payload: value\n    }\n}\n\nexport default setLoggedInStatus","/Users/vladimirputin/Desktop/projects/wishlist/src/store/actionCreators/setUsersAction.ts",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/utils.ts",[],"/Users/vladimirputin/Desktop/projects/wishlist/src/components/WishesBlock/EmptyWishComponent.tsx",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":3,"column":8,"nodeType":"107","messageId":"108","endLine":3,"endColumn":14},{"ruleId":"105","severity":1,"message":"109","line":3,"column":10,"nodeType":"107","messageId":"108","endLine":3,"endColumn":19},{"ruleId":"105","severity":1,"message":"106","line":4,"column":24,"nodeType":"107","messageId":"108","endLine":4,"endColumn":30},{"ruleId":"105","severity":1,"message":"110","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":14},{"ruleId":"105","severity":1,"message":"106","line":4,"column":8,"nodeType":"107","messageId":"108","endLine":4,"endColumn":14},{"ruleId":"105","severity":1,"message":"111","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":23},{"ruleId":"105","severity":1,"message":"112","line":28,"column":17,"nodeType":"107","messageId":"108","endLine":28,"endColumn":22},{"ruleId":"101","replacedBy":"113"},{"ruleId":"103","replacedBy":"114"},{"ruleId":"105","severity":1,"message":"115","line":1,"column":18,"nodeType":"107","messageId":"108","endLine":1,"endColumn":22},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"@typescript-eslint/no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Accordion' is defined but never used.","'Item' is defined but never used.","'setLoggedInUser' is defined but never used.","'match' is assigned a value but never used.",["116"],["117"],"'User' is defined but never used.","no-global-assign","no-unsafe-negation"]